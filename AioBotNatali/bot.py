import asyncio
import requests
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from googletrans import Translator
from config import TOKEN, THE_CAT_API_KEY, NASA_API_KEY, SPOONACULAR_API_KEY

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
translator = Translator()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å The Cat API
def get_cat_info():
    url = "https://api.thecatapi.com/v1/images/search"
    headers = {"x-api-key": THE_CAT_API_KEY}
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data[0]["url"]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å NASA API
def get_random_nasa_image():
    start_date = datetime.now() - timedelta(days=365)
    random_date = start_date + timedelta(days=random.randint(0, 365))
    date_str = random_date.strftime("%Y-%m-%d")
    url = f"https://api.nasa.gov/planetary/apod?api_key={NASA_API_KEY}&date={date_str}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data.get("url"), data.get("title")  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    return None, None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å The Joke API —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
def get_joke():
    url = "https://v2.jokeapi.dev/joke/Any"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if data.get("type") == "single":
            joke = data.get("joke")  # –û–¥–∏–Ω–æ—á–Ω–∞—è —à—É—Ç–∫–∞
        elif data.get("type") == "twopart":
            joke = f"{data.get('setup')} - {data.get('delivery')}"  # –î–≤—É—Ö—á–∞—Å—Ç–Ω–∞—è —à—É—Ç–∫–∞
        else:
            joke = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É üò¢."

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —à—É—Ç–∫—É –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        translated = translator.translate(joke, src="en", dest="ru")
        return translated.text
    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É üò¢. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è Spoonacular API
def get_recipe_from_spoonacular(ingredients):
    url = (
        f"https://api.spoonacular.com/recipes/findByIngredients?ingredients={ingredients}"
        f"&number=1&apiKey={SPOONACULAR_API_KEY}"
    )
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if data:
            recipe = data[0]
            return (
                recipe["title"],  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
                f"https://spoonacular.com/recipe/{recipe['id']}",  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç
                recipe["image"],  # –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞
            )
    return None, None, None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç:\n"
        "üêæ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ—Ç–∏–∫–æ–≤\n"
        "üåå –î–µ–ª–∏—Ç—å—Å—è –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏\n"
        "üòÇ –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å —à—É—Ç–∫–∏\n"
        "üç¥ –ò—Å–∫–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º\n"
        "–ü–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/cat ‚Äì –£–≤–∏–¥–µ—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∏–∫–∞\n"
        "/nasa ‚Äì –ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–Ω—è\n"
        "/joke ‚Äì –£—Å–ª—ã—à–∞—Ç—å —Å–º–µ—à–Ω—É—é —à—É—Ç–∫—É\n"
        "/recipe ‚Äì –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º\n"
        "/help ‚Äì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cat
@dp.message(Command("cat"))
async def send_cat_photo(message: Message):
    cat_url = get_cat_info()
    if cat_url:
        await message.answer_photo(photo=cat_url, caption="–í–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ç–∏–∫ –¥–ª—è –≤–∞—Å!")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞ üòø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /nasa
@dp.message(Command("nasa"))
async def send_nasa_photo(message: Message):
    photo_url, title = get_random_nasa_image()
    if photo_url:
        await message.answer_photo(photo=photo_url, caption=f"üåå {title}")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ NASA. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /joke
@dp.message(Command("joke"))
async def send_joke(message: Message):
    joke = get_joke()
    await message.answer(f"üòÇ {joke}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recipe
@dp.message(Command("recipe"))
async def send_recipe(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫—É—Ä–∏—Ü–∞, –∫–∞—Ä—Ç–æ—à–∫–∞, —Å—ã—Ä).")

    @dp.message()
    async def handle_ingredients(msg: Message):
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        translated_ingredients = translator.translate(msg.text, src="ru", dest="en").text.replace(" ", "").lower()

        name, url, image = get_recipe_from_spoonacular(translated_ingredients)
        if name:
            await msg.answer_photo(
                photo=image,
                caption=f"üç¥ {name}\n\n–†–µ—Ü–µ–ø—Ç: [–°—Å—ã–ª–∫–∞]({url})",
                parse_mode="Markdown"
            )
        else:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.")


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
